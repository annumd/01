// server.js
const express = require('express');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const cors = require('cors');
require('dotenv').config(); // To use environment variables

const app = express();
const port = 3000;

// In-memory storage for submitted names
let namePairs = [];

// Middleware
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());

// Endpoint to handle form submission
app.post('/send-names', (req, res) => {
    const { name1, name2 } = req.body;

    // Store the name pair
    namePairs.push({ name1, name2 });

    // Configure the email transport using nodemailer
    let transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: process.env.EMAIL_USER, // replace with your email
            pass: process.env.EMAIL_PASS  // replace with your email password
        }
    });

    // Email options
    let mailOptions = {
        from: process.env.EMAIL_USER, // replace with your email
        to: 'annumdofficial@gmail.com',
        subject: 'FLAMES Game - Names Used',
        text: `Name 1: ${name1}, Name 2: ${name2}`
    };

    // Send email
    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            console.log(error);
            return res.status(500).send('Error sending email');
        }
        console.log('Email sent: ' + info.response);
        res.status(200).send('Names received and email sent');
    });
});

// Endpoint to retrieve all name pairs (protected)
app.post('/get-names', (req, res) => {
    const { adminPassword } = req.body;

    // Check if the provided password matches the admin password
    if (adminPassword !== process.env.ADMIN_PASSWORD) {
        return res.status(403).send('Forbidden: Invalid password');
    }

    // Return the stored name pairs
    res.status(200).json(namePairs);
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
2. Environment Variables
